---
- name: Ansible Filters
  hosts: r2
  gather_facts: false
  vars:
    # ospf_process_id: 2
    # vrf_name: 'mgmt'
    # devices: ['r1', 'r2']
    #ansible_python_interpreter: /home/naima/py_venv/venv1/bin/python3.12

  tasks:
  ########### default #############
    # - name: Print output
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ ospf_process_id | default(1, true)}}"
  
  ########### default(omit) #############
    # - name: Interface Config
    #   with_items: "{{ interface_list }}"
    #   cisco.ios.ios_interfaces:
    #     config:
    #       - name: "{{item.name}}"
    #         description: "{{item.description | default(omit)}}"
    #   register: intf_config

    # - name: Print output
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ intf_config }}"

    ########## Ternary ###############
    # - name: Ternary Filter
    #   ansible.builtin.set_fact:
    #     vrf_type: "{{ (vrf_name == 'mgmt') | ternary('management' , 'non-management') }}"
    
    # - name: Print output
    #   ansible.builtin.debug:
    #     msg: 
    #       - "{{ vrf_type }}"
    #       - "{{ vrf_type | type_debug }}"
    #       - "{{ devices | type_debug }}"
    
    ########## dict2items, items2dict ############
    # - name: Ansible dict2items Filter
    #   ansible.builtin.debug:
    #     msg: "{{ ospf_vars | dict2items }}"
    
    # - name: Ansible dict2items Filter
    #   ansible.builtin.debug:
    #     msg: "{{ ospf_vars | dict2items(key_name='abc', value_name='cde') }}"

    # - name: Ansible items2dict Filter
    #   ansible.builtin.debug:
    #     msg: "{{interface_list | items2dict(key_name='name', value_name='ip') }}"
    
    ########## Save to_json, to_yaml ############
    # - name: Save to_json
    #   ansible.builtin.copy:
    #     #content: "{{ ospf_vars | to_json }}"
    #     #content: "{{ ospf_vars | to_nice_json }}"
    #     content: "{{ ospf_vars | to_nice_json(indent=8) }}"
    #     #dest: to_json_demo.json
    #     #dest: to_nice_json_demo.json
    #     dest: to_nice_json_ind_demo.json

    # - name: Save to_yaml
    #   ansible.builtin.copy:
    #     #content: "{{ interface_list | to_yaml }}"
    #     content: "{{ interface_list | to_nice_yaml(indent=8) }}"
    #     dest: to_nice_yaml_ind_demo.yaml

    ########## Convert into ansible variable from_json, from_yaml ############
    # - name: Print from_json file
    #   ansible.builtin.debug:
    #     msg: 
    #       - "{{ lookup('file', '/home/naima/Ansible_Practice_1/to_json_demo.json') | from_json }}"
    #       - "{{ (lookup('file', '/home/naima/Ansible_Practice_1/to_json_demo.json') | from_json).area }}"
    
    # - name: Print from_yaml file
    #   ansible.builtin.debug:
    #     msg: 
    #       - "{{ lookup('file', '/home/naima/Ansible_Practice_1/to_yaml_demo.yaml') | from_yaml }}"
    
     ########## Zip and Zip_longest ############
    # - name: Zip and Zip_longest
    #   ansible.builtin.set_fact:
    #    # route_list: "{{dest_subs | zip(dest_gws) | list}}"
    #    # route_list: "{{dest_subs | zip_longest(dest_gws) | list}}"
    #     route_list: "{{dest_subs | zip_longest(dest_gws, fillvalue='GigabitEthernet0/2') | list}}"

    # - name: Print Zip data
    #   ansible.builtin.debug:
    #     msg: "{{ route_list }}"

    # - name: Generate route command
    #   loop: "{{route_list}}"
    #   ansible.builtin.set_fact:
    #     route_conf: "{{ route_conf | default([]) + ['ip route ' + item[0] + ' 255.255.255.0 ' + item[1] ]}}"
    
    # - name: Print Output
    #   ansible.builtin.debug:
    #     msg: "{{ route_conf }}"
    
    # - name: Create dict
    #   ansible.builtin.set_fact:
    #     route_dict: "{{dict(dest_subs | zip_longest(dest_gws, fillvalue='GigabitEthernet0/2'))}}"

    # - name: Print Output
    #   ansible.builtin.debug:
    #     msg: "{{ route_dict }}"
 
    ######### Combine Filter #########
    # - name: Print Combine 
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ {'Gi1': '1.1.1.1', 'Gi2': '2.2.2.2'} | combine({'Gi2': '2.2.3.3'}) }}"
    #       - "{{ ['a', 'b'] + ['c', 'd', 'a'] }}"
    #       - "{{ (['a', 'b'] + ['c', 'd', 'a']) | unique }}"
    
    ######### Map Filter #########
    # - name: Print map 
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ [0,3] | map('extract', dest_subs)}}"
    #       - "{{ [0,3,2] | map('extract', dest_subs) | list}}"
    #       - "{{ ['name'] | map('extract', interface_list[0]) }}"
    #       - "{{ interface_list | map(attribute='ip') }}"
    
     ######### List operations #########
    # - name: List operations
    #   vars:
    #     data1: [1,2,3,4,5,6,7,10,11,12]
    #     data2: [8,9,10,11,12]
    #   ansible.builtin.debug:
    #     msg:
    #       #- "{{ [1,2,[3,4,5, [6,7,8,[9,10]]]] | flatten(levels=2) }}"
    #       #- "{{ data1 | union(data2)}}"
    #       #- "{{ data1 | intersect(data2)}}"
    #      #- "{{ data1 | difference(data2)}}"
    #      #- "{{ data2 | difference(data1)}}"
    #       - "{{ data1 | symmetric_difference(data2)}}"

       ########### json_query #############
    # - name: Interface Config
    #   cisco.ios.ios_interfaces:
    #     state: gathered
    #   register: intf_config

    # - name: Print intf config
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ intf_config }}"

    # - name: Print enabled True interfaces
    #   ansible.builtin.debug:
    #     msg:
    #       - '{{ intf_config.gathered | json_query("[?description]") }}' ## prints interfaces with description
    #       - '{{ intf_config.gathered | json_query("[?enabled==`true`]") }}'
    #       - '{{ intf_config.gathered | json_query("[?enabled==`false`]") }}'
    #       - '{{ intf_config.gathered | json_query("[?enabled==`false`].[name]") }}'
    #       - '{{ intf_config.gathered | json_query("[?enabled==`false`].name") }}'
    #       - '{{ intf_config.gathered | json_query("[?enabled==`false`].{name: name, speed: speed}") }}'
  
    ########### IP Address #############
    # - name: Validate IP Address-ipaddr filter
    #   vars:
    #     ip_list:
    #       - 192.168.0.1
    #       - 192.168.1.0/24
    #       - 192.168.100.23
    #       - 300.168.100.23
    #       - fd00::/8
    #       - 100.10.10.1
    #       - 192.168.10.1/28
    #       - 192.168.0.22

    #   ansible.builtin.debug:
    #     msg:
    #       #- "{{ '192.168.0.0' | ansible.utils.ipaddr }}"
    #       # - "{{ ip_list | ansible.utils.ipaddr }}"
    #       # - "{{ ip_list | ansible.utils.ipv4 }}"
    #       # - "{{ ip_list | ansible.utils.ipv6 }}"
    #       # - "Addresses: {{ ip_list | ansible.utils.ipv4('address') }}"
    #       # - "Host:{{ ip_list | ansible.utils.ipv4('host') }}"
    #       # - "Public Addresses:{{ ip_list | ansible.utils.ipv4('public') }}"
    #       # - "Networks:{{ ip_list | ansible.utils.ipv4('net') }}"
    #       # - "{{ ip_list | ansible.utils.ipv4('192.168.0.0/24') }}"
    #       # - "{{ ip_list | ansible.utils.ipv4('host/prefix') }}"
    #       # - "Address is:{{ ip_list[6] | ansible.utils.ipv4('address') }}"
    #       # - "Network is:{{ ip_list[6] | ansible.utils.ipv4('network') }}"
    #       # - "Netmask is:{{ ip_list[6] | ansible.utils.ipv4('netmask') }}"
    #       # - "Broadcast is:{{ ip_list[6] | ansible.utils.ipv4('broadcast') }}"
    #       - "Usable:{{ ip_list[1] | ansible.utils.network_in_usable('192.168.1.10') }}"
    #       - "Usable:{{ ip_list[1] | ansible.utils.network_in_usable('192.168.2.16/28') }}"
   
   ######## URL Split ###########################
    - name: URL Split Filter
      vars:
        #test_url: "https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html"
        test_url: "https://admin:pwd%40123@docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html"
      ansible.builtin.debug:
        msg:
          # - "{{ test_url | urlsplit }}"
          # - "{{ test_url | urldecode }}"
          # - "{{ test_url | urlsplit('netloc') | urldecode }}"
          - "{{ test_url | urlsplit('hostname')}}"
   